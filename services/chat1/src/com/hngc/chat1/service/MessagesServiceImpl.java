/*Copyright (c) 2019-2020 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.hngc.chat1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.hngc.chat1.Messages;


/**
 * ServiceImpl object for domain model class Messages.
 *
 * @see Messages
 */
@Service("chat1.MessagesService")
@Validated
public class MessagesServiceImpl implements MessagesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(MessagesServiceImpl.class);


    @Autowired
    @Qualifier("chat1.MessagesDao")
    private WMGenericDao<Messages, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Messages, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "chat1TransactionManager")
    @Override
    public Messages create(Messages messages) {
        LOGGER.debug("Creating a new Messages with information: {}", messages);

        Messages messagesCreated = this.wmGenericDao.create(messages);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(messagesCreated);
    }

    @Transactional(readOnly = true, value = "chat1TransactionManager")
    @Override
    public Messages getById(Integer messagesId) {
        LOGGER.debug("Finding Messages by id: {}", messagesId);
        return this.wmGenericDao.findById(messagesId);
    }

    @Transactional(readOnly = true, value = "chat1TransactionManager")
    @Override
    public Messages findById(Integer messagesId) {
        LOGGER.debug("Finding Messages by id: {}", messagesId);
        try {
            return this.wmGenericDao.findById(messagesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Messages found with id: {}", messagesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "chat1TransactionManager")
    @Override
    public List<Messages> findByMultipleIds(List<Integer> messagesIds, boolean orderedReturn) {
        LOGGER.debug("Finding Messages by ids: {}", messagesIds);

        return this.wmGenericDao.findByMultipleIds(messagesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "chat1TransactionManager")
    @Override
    public Messages update(Messages messages) {
        LOGGER.debug("Updating Messages with information: {}", messages);

        this.wmGenericDao.update(messages);
        this.wmGenericDao.refresh(messages);

        return messages;
    }

    @Transactional(value = "chat1TransactionManager")
    @Override
    public Messages partialUpdate(Integer messagesId, Map<String, Object>messagesPatch) {
        LOGGER.debug("Partially Updating the Messages with id: {}", messagesId);

        Messages messages = getById(messagesId);

        try {
            ObjectReader messagesReader = this.objectMapper.reader().forType(Messages.class).withValueToUpdate(messages);
            messages = messagesReader.readValue(this.objectMapper.writeValueAsString(messagesPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", messagesPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        messages = update(messages);

        return messages;
    }

    @Transactional(value = "chat1TransactionManager")
    @Override
    public Messages delete(Integer messagesId) {
        LOGGER.debug("Deleting Messages with id: {}", messagesId);
        Messages deleted = this.wmGenericDao.findById(messagesId);
        if (deleted == null) {
            LOGGER.debug("No Messages found with id: {}", messagesId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Messages.class.getSimpleName(), messagesId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "chat1TransactionManager")
    @Override
    public void delete(Messages messages) {
        LOGGER.debug("Deleting Messages with {}", messages);
        this.wmGenericDao.delete(messages);
    }

    @Transactional(readOnly = true, value = "chat1TransactionManager")
    @Override
    public Page<Messages> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Messages");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "chat1TransactionManager")
    @Override
    public Page<Messages> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Messages");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "chat1TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service chat1 for table Messages to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "chat1TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service chat1 for table Messages to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "chat1TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "chat1TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}